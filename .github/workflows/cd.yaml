name: 'Deploy'
on: ['deployment']

jobs:
  deployment:
    runs-on: 'ubuntu-latest'
    steps:
    - name: Print details
      run: |
        echo "environment - ${{ github.event.deployment.environment }}"
        echo "version - ${{ github.event.deployment.payload }}"
    - name: 'Checkout'
      uses: 'actions/checkout@v2'
      with:
        ref: 'refs/tags/${{github.event.deployment.payload}}'
    
    - name: Package chart
      uses: WyriHaximus/github-action-helm3@v2
      with:
        exec: "helm package --app-version ${{ github.event.deployment.payload }} ./deployment"

    - name: Read Helm Chart
      id: "chart_info"
      uses: jacobtomlinson/gha-read-helm-chart@master
      with:
        path: ./deployment

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Save DigitalOcean kubeconfig
      id: kubeconfig
      run: |
        kubeconfig=$(doctl kubernetes cluster kubeconfig show --expiry-seconds 1000 ryu-${{ github.event.deployment.environment }}-cluster)
        echo "::add-mask::$kubeconfig"
        echo 'KUBECONFIG<<EOF' >> $GITHUB_ENV
        echo "$kubeconfig" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: 'Deploy'
      # Parameters are pulled directly from the GitHub deployment event so the
      # configuration for the job here is very minimal.
      uses: 'deliverybot/helm@v1.7.0'
      if: ${{github.event.deployment.environment == 'staging' || github.event.deployment.environment == 'production'}}
      with:
        token: '${{ github.token }}'
        secrets: '${{ toJSON(secrets) }}'
        release: 'ryu-backend'
        namespace: 'default'
        helm: 'helm3'
        value-files: >-
          [
            "./deployment/values.yaml", 
            "./deployment/config/${{ github.event.deployment.environment }}.yaml"
          ]
        version: ${{ github.event.deployment.payload }}
        chart: "./${{ steps.chart_info.outputs.name }}-${{ steps.chart_info.outputs.version }}.tgz"
      env:
        KUBECONFIG_FILE: ${{ env.KUBECONFIG }}